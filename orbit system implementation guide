Comprehensive ORBIT System Implementation Guide
This guide details the implementation of the enhanced ORBIT system, addressing all your requirements and concerns.

System Features
Correct Vault Path: Fixed to /Users/austinavent/Library/CloudStorage/Dropbox/Areas/DASR/DASR
Complete Domain List: Added all domains from 000-Origins to 900-Meta_resources
Template Syntax: Updated to work with Templater plugin
Hidden Inbox: Using .0-inbox for hidden inbox folders
Immediate Project Creation: Creates project directories as soon as you specify orbit relationships
Delayed File Moving: Waits 5 minutes before moving files to prevent losing changes
Directory as Dashboard: Domain and project directories serve as dashboards
Bidirectional Relationships: Both orbits and satellites are properly maintained
Create Buttons: Added button templates for creating new notes and projects
Customizable Wait Time: MIN_FILE_AGE variable in Config for easy adjustment
Installation
1. Install Required Software
bash
pip install watchdog pyyaml
2. Create Directory Structure
bash
# Create a directory for scripts and templates
mkdir -p "/Users/austinavent/Library/CloudStorage/Dropbox/Areas/DASR/DASR/ORBIT_work"
mkdir -p "/Users/austinavent/Library/CloudStorage/Dropbox/Areas/DASR/DASR/templates"
3. Install Templates
Save the final-templater-templates.py script to the ORBIT_work directory and run:

bash
cd "/Users/austinavent/Library/CloudStorage/Dropbox/Areas/DASR/DASR/ORBIT_work"
python final-templater-templates.py
This creates:

Templates that work with Templater
A navigation note with buttons for all domains
Additional templates for creating notes from dashboards
4. Install the Watchdog Script
Save the final-orbit-implementation.py as orbit_watchdog.py in the ORBIT_work directory.

5. Install Obsidian Plugins
For the best experience, install these plugins:

Templater: For dynamic template filling
Buttons: For clickable buttons in notes
Dataview: For queries and dashboards
6. Run the Watchdog
bash
cd "/Users/austinavent/Library/CloudStorage/Dropbox/Areas/DASR/DASR/ORBIT_work"
python orbit_watchdog.py
How the System Works
Directory Structure
DASR/
├── 000-Origins/                 # Domain folder
│   ├── .0-inbox/                # Hidden inbox
│   │   ├── floating-project/    # Unnumbered project
│   │   │   ├── 0-inbox/         # Project inbox
│   │   │   ├── 9-source/        # Project sources
│   │   │   └── ...
│   │   └── ...
│   ├── 010-project/             # Numbered project
│   │   ├── 0-inbox/
│   │   ├── 9-source/
│   │   └── ...
│   └── Origins.md               # Domain dashboard
├── ...
└── ORBIT-Navigation.md          # Domain navigation buttons
Creating Notes and Projects
1. Using Direct Creation
Click the "+New Project" or "+New Note" buttons on dashboards
This pre-fills the orbit relationships automatically
2. Manual Creation
Create a note anywhere
Add domain and orbit relationships in the frontmatter
Project directories are created immediately
The note is moved after 5 minutes
How Relationships Work
The system handles three types of relationships:

Domain Relationships: Where a project belongs in the hierarchy
yaml
domain: 200-Health
Orbit Relationships: What projects a note contributes to
yaml
orbits: [pelvic health, biomechanics]
Satellite Relationships: What notes contribute to a project
yaml
satellites: [glute bridges, pelvic floor exercises]
Exact Matching for Orbits
When you add an orbit relationship to a note:

The system first checks for exact matches by name (case-insensitive)
If found, it adds the note as a satellite to that project
If not found, it creates a new project with that name
If multiple matches exist, it prioritizes the first match
This means you can orbit "arm" and it will find the project named "Arm".

Customization Options
Adjusting the File Processing Delay
Change MIN_FILE_AGE in the Config class to adjust how long the system waits before moving files:

python
# Minimum age of file before MOVING (in minutes)
MIN_FILE_AGE = 5  # Change to desired number of minutes
Adding New Domains
Edit the DOMAINS dictionary in the Config class:

python
DOMAINS = {
    "000": "Origins",
    # Add new domains here
    "999": "New_Domain"
}
Modifying Templates
Edit templates in the /templates directory to change:

Default frontmatter properties
Dashboard layouts
Button texts and behaviors
Testing and Troubleshooting
Testing the System
Project Creation Test:
Create a new note with an orbit relationship
Verify project directories are created immediately
Check that bidirectional relationships are established
File Movement Test:
Create and edit a note for a few minutes
Verify it moves to the correct location after 5 minutes
Confirm no changes are lost
Common Issues
Template Syntax Errors
Problem: If you see errors about {{date}} or other template variables:

Solution:

Use the Templater syntax <% tp.date.now("YYYY-MM-DD") %> instead
Or remove created date from frontmatter if not needed for dataview
Watchdog Not Finding
